[
  {
    "id": "/2019/12/16/terminology-dimmed-background",
    "title": "[Terminology] Dimmed Background",
    "description": null,
    "date": "2019-12-16 00:00:00 +0900",
    "tags": ["Terminology","Design","Web Graphic Design"],
    "slug": "terminology-dimmed-background",
    "url": "/2019/12/16/terminology-dimmed-background",
    "content": "<p>웹 그래픽 디자인에서 Modal이 활성화 될 때 반투명한 어두운 색의 오버레이 효과를 볼 수 있는데 이를 <strong>Dimmed Background</strong>라고 부른다.\n<!--more--></p>\n\n<h1 id=\"참고-내용\">참고 내용</h1>\n\n<h2 id=\"관련-사전적-정의\">관련 사전적 정의</h2>\n\n<p><a href=\"http://endic.naver.com/enkrEntry.nhn?entryId=47bd0788d48f4be9bcd0b698bb58d1a4\">dim</a> 미국·영국 [dɪm]</p>\n<ol>\n  <li><em>(빛이) 어둑한</em></li>\n  <li><em>(장소가) 어둑한</em></li>\n  <li><em>(형체가) 흐릿한</em></li>\n</ol>\n\n<hr />\n\n<h2 id=\"관련-이미지\">관련 이미지</h2>\n\n<p><img src=\"https://codropspz-tympanus.netdna-ssl.com/codrops/wp-content/uploads/2013/11/dialog-demo.png\" alt=\"dimmed\" /></p>\n",
    "excerpt": "<p>웹 그래픽 디자인에서 Modal이 활성화 될 때 반투명한 어두운 색의 오버레이 효과를 볼 수 있는데 이를 <strong>Dimmed Background</strong>라고 부른다.</p>\n",
    "previous": "/2019/12/12/spf-dkim-dmarc",
    "next": null
  },
  {
    "id": "/2019/12/12/spf-dkim-dmarc",
    "title": "이메일 관련 보안 기술: SPF, DKIM, DMARC",
    "description": null,
    "date": "2019-12-12 00:00:00 +0900",
    "tags": ["SPF","DKIM","DMARC"],
    "slug": "spf-dkim-dmarc",
    "url": "/2019/12/12/spf-dkim-dmarc",
    "content": "<p>최근에 대량 이메일 발송 처리 작업을 진행하였습니다. 발신과 수신은 정상적으로 처리되었지만 스팸함으로 수신되는 문제가 있었습니다. 스팸함으로 수신되지 않도록 메일 서비스 업체에서 제공하는 가이드라인을 준수해야 했습니다. 제공된 가이드라인 중 발신 정보의 위장 혹은 변조와 같은 보안적인 문제를 위해 적용해야 하는 기술 내용이 있었습니다. 이번 글은 이러한 이메일 관련 보안 기술 중 <code class=\"highlighter-rouge\">SPF</code>, <code class=\"highlighter-rouge\">DKIM</code>, <code class=\"highlighter-rouge\">DMARC</code>에 대해 살펴보겠습니다.</p>\n\n<blockquote>\n  <p>아래에서 각 기술에 대한 작동 원리에 대해 설명하는 부분이 있습니다. 이 부분은 해당 기술에 대한 이해를 돕기 위한 목표로 참고 용도로 읽어 주시기 바랍니다.</p>\n</blockquote>\n\n<h1 id=\"spf\">SPF</h1>\n\n<p><code class=\"highlighter-rouge\">SPF</code>는 <em>Sender Policy Framework</em>의 약어이며 번역하면 <em>메일서버등록제</em>라고 표현할 수 있습니다. 발신자 정보를 도용하거나 <code class=\"highlighter-rouge\">Spoofing</code>과 같은 악용적인 사례를 위해 개발된 기술입니다. 인증된 발신자 정보를 사전에 공개하여 이메일 수신 시 수신 내용에 포함된 발신자 정보와 공개한 인증된 발신자 정보를 대조하여 인증된 발신자로부터 이메일을 발신했는지 알 수 있게 됩니다.</p>\n\n<h2 id=\"작동-원리\">작동 원리</h2>\n\n<ol>\n  <li><code class=\"highlighter-rouge\">DNS</code>에서 <code class=\"highlighter-rouge\">TXT</code> 유형으로 <code class=\"highlighter-rouge\">SPF</code> 레코드를 정의합니다. (인증된 발신자 정보를 등록합니다.)</li>\n  <li>이메일 수신 시 수신 측은 DNS에 <code class=\"highlighter-rouge\">SPF</code> 레코드를 질의하여 수신된 발신자 정보와 인증된 발신자 정보를 대조하여 인증된 발신지로부터 발신되었는지 확인합니다.</li>\n</ol>\n\n<h1 id=\"dkim\">DKIM</h1>\n\n<p><code class=\"highlighter-rouge\">DKIM</code>은 <em>DomainKeys Identified Mail</em>의 악어이며 번역하면 <em>도메인키 인증 메일</em>이라고 표현할 수 있습니다. 수신된 이메일에서 포함하고 있는 발신자 정보의 도메인으로부터 허가된 발신인지 확인하기 위해 개발된 기술입니다. 디지털 서명 방식을 통해 <code class=\"highlighter-rouge\">DKIM</code> 서명을 발신 내용에 같이 포함하여 전송하면 수신 측에서 공개된 키를 이용하여 서명 값을 해독 후 검증하여 허가된 발신인지 확인합니다.</p>\n\n<h2 id=\"작동-원리-1\">작동 원리</h2>\n\n<ol>\n  <li><code class=\"highlighter-rouge\">DNS</code>에서 <code class=\"highlighter-rouge\">TXT</code> 유형으로 <code class=\"highlighter-rouge\">DKIM</code> 레코드를 정의합니다. (디지털 서명 복호화에 사용 될 공개키를 등록합니다.)</li>\n  <li>이메일 발신 시 서명 대상(헤더 혹은/또는 본문)을 해싱하여 나온 해시값을 개인키로 암호화하여 헤더에 포함하여 전송합니다.</li>\n  <li>이메일 수신 시 수신 측에서 <code class=\"highlighter-rouge\">DNS</code>에 <code class=\"highlighter-rouge\">DKIM</code> 레코드를 질의하여 <code class=\"highlighter-rouge\">DKIM</code> 서명을 공개키로 복호화 후 서명된 요소를 자체 해싱해서 복호화된 값과 대조를 통해 허가된 발신인지 확인힙니다.</li>\n</ol>\n\n<h1 id=\"dmarc\">DMARC</h1>\n\n<p><code class=\"highlighter-rouge\">DMARC</code>는 <em>Domain-based Message Authentication, Reporting and Conformance</em>의 약어이며 번역하면 <em>도메인 기반 이메일 인증</em>이라고 표현할 수 있습니다. 수신된 이메일의 인증이 실패하여 의심스러운 이메일로 판별되었을 때 이에 대한 보고와 작업을 지정할 수 있도록 개발된 기술입니다. <code class=\"highlighter-rouge\">SPF</code>와 <code class=\"highlighter-rouge\">DKIM</code> 기술을 활용하여 인증하고 실패하였을 경우 지정된 목적지로 해당 내용에 대해 보고를 하며 무시, 스팸함으로 이동, 수신 거부와 같은 후속 작업을 처리합니다.</p>\n\n<h2 id=\"작동-원리-2\">작동 원리</h2>\n\n<ol>\n  <li><code class=\"highlighter-rouge\">DNS</code>에서 <code class=\"highlighter-rouge\">TXT</code> 유형으로 <code class=\"highlighter-rouge\">DMARC</code> 레코드를 정의합니다. (의심스러운 이메일에 대한 보고를 받은 이메일 주소 또는 작업 등을 설정합니다.)</li>\n  <li>이메일 수신 시 수신 측에서 <code class=\"highlighter-rouge\">SPF</code>와 <code class=\"highlighter-rouge\">DKIM</code>을 활용하여 인증 작업을 진행합니다.</li>\n  <li>인증 작업이 실패하였을 경우 발신자 정보를 통해 <code class=\"highlighter-rouge\">DNS</code>에 <code class=\"highlighter-rouge\">DMARC</code> 레코드를 질의하여 해당 내용을 지정된 이메일 주소로 보고하고 지정된 후속 작업을 처리합니다.</li>\n</ol>\n\n<h1 id=\"마무리\">마무리</h1>\n\n<p>위 기술을 통해 스팸, 피싱, 스푸핑과 같은 악용적인 사례를 방지하는 데 도움을 줄 수 있으며 제가 대량 이메일 발송 처리 작업을 진행하여 스팸함으로 수신되는 이유를 알 수 있도록 도움을 주었습니다. 큰 기업일수록 이는 권장 사항이 아닌 필수 사항으로 도입해야 하는 기술이 아닌가 싶습니다.</p>\n",
    "excerpt": "<p>최근에 대량 이메일 발송 처리 작업을 진행하였습니다. 발신과 수신은 정상적으로 처리되었지만 스팸함으로 수신되는 문제가 있었습니다. 스팸함으로 수신되지 않도록 메일 서비스 업체에서 제공하는 가이드라인을 준수해야 했습니다. 제공된 가이드라인 중 발신 정보의 위장 혹은 변조와 같은 보안적인 문제를 위해 적용해야 하는 기술 내용이 있었습니다. 이번 글은 이러한 이메일 관련 보안 기술 중 <code class=\"highlighter-rouge\">SPF</code>, <code class=\"highlighter-rouge\">DKIM</code>, <code class=\"highlighter-rouge\">DMARC</code>에 대해 살펴보겠습니다.</p>\n\n<blockquote>\n  <p>아래에서 각 기술에 대한 작동 원리에 대해 설명하는 부분이 있습니다. 이 부분은 해당 기술에 대한 이해를 돕기 위한 목표로 참고 용도로 읽어 주시기 바랍니다.</p>\n</blockquote>\n\n<h1 id=\"spf\">SPF</h1>\n\n<p><code class=\"highlighter-rouge\">SPF</code>는 <em>Sender Policy Framework</em>의 약어이며 번역하면 <em>메일서버등록제</em>라고 표현할 수 있습니다. 발신자 정보를 도용하거나 <code class=\"highlighter-rouge\">Spoofing</code>과 같은 악용적인 사례를 위해 개발된 기술입니다. 인증된 발신자 정보를 사전에 공개하여 이메일 수신 시 수신 내용에 포함된 발신자 정보와 공개한 인증된 발신자 정보를 대조하여 인증된 발신자로부터 이메일을 발신했는지 알 수 있게 됩니다.</p>\n\n<h2 id=\"작동-원리\">작동 원리</h2>\n\n<ol>\n  <li><code class=\"highlighter-rouge\">DNS</code>에서 <code class=\"highlighter-rouge\">TXT</code> 유형으로 <code class=\"highlighter-rouge\">SPF</code> 레코드를 정의합니다. (인증된 발신자 정보를 등록합니다.)</li>\n  <li>이메일 수신 시 수신 측은 DNS에 <code class=\"highlighter-rouge\">SPF</code> 레코드를 질의하여 수신된 발신자 정보와 인증된 발신자 정보를 대조하여 인증된 발신지로부터 발신되었는지 확인합니다.</li>\n</ol>\n\n<h1 id=\"dkim\">DKIM</h1>\n\n<p><code class=\"highlighter-rouge\">DKIM</code>은 <em>DomainKeys Identified Mail</em>의 악어이며 번역하면 <em>도메인키 인증 메일</em>이라고 표현할 수 있습니다. 수신된 이메일에서 포함하고 있는 발신자 정보의 도메인으로부터 허가된 발신인지 확인하기 위해 개발된 기술입니다. 디지털 서명 방식을 통해 <code class=\"highlighter-rouge\">DKIM</code> 서명을 발신 내용에 같이 포함하여 전송하면 수신 측에서 공개된 키를 이용하여 서명 값을 해독 후 검증하여 허가된 발신인지 확인합니다.</p>\n\n<h2 id=\"작동-원리-1\">작동 원리</h2>\n\n<ol>\n  <li><code class=\"highlighter-rouge\">DNS</code>에서 <code class=\"highlighter-rouge\">TXT</code> 유형으로 <code class=\"highlighter-rouge\">DKIM</code> 레코드를 정의합니다. (디지털 서명 복호화에 사용 될 공개키를 등록합니다.)</li>\n  <li>이메일 발신 시 서명 대상(헤더 혹은/또는 본문)을 해싱하여 나온 해시값을 개인키로 암호화하여 헤더에 포함하여 전송합니다.</li>\n  <li>이메일 수신 시 수신 측에서 <code class=\"highlighter-rouge\">DNS</code>에 <code class=\"highlighter-rouge\">DKIM</code> 레코드를 질의하여 <code class=\"highlighter-rouge\">DKIM</code> 서명을 공개키로 복호화 후 서명된 요소를 자체 해싱해서 복호화된 값과 대조를 통해 허가된 발신인지 확인힙니다.</li>\n</ol>\n\n<h1 id=\"dmarc\">DMARC</h1>\n\n<p><code class=\"highlighter-rouge\">DMARC</code>는 <em>Domain-based Message Authentication, Reporting and Conformance</em>의 약어이며 번역하면 <em>도메인 기반 이메일 인증</em>이라고 표현할 수 있습니다. 수신된 이메일의 인증이 실패하여 의심스러운 이메일로 판별되었을 때 이에 대한 보고와 작업을 지정할 수 있도록 개발된 기술입니다. <code class=\"highlighter-rouge\">SPF</code>와 <code class=\"highlighter-rouge\">DKIM</code> 기술을 활용하여 인증하고 실패하였을 경우 지정된 목적지로 해당 내용에 대해 보고를 하며 무시, 스팸함으로 이동, 수신 거부와 같은 후속 작업을 처리합니다.</p>\n\n<h2 id=\"작동-원리-2\">작동 원리</h2>\n\n<ol>\n  <li><code class=\"highlighter-rouge\">DNS</code>에서 <code class=\"highlighter-rouge\">TXT</code> 유형으로 <code class=\"highlighter-rouge\">DMARC</code> 레코드를 정의합니다. (의심스러운 이메일에 대한 보고를 받은 이메일 주소 또는 작업 등을 설정합니다.)</li>\n  <li>이메일 수신 시 수신 측에서 <code class=\"highlighter-rouge\">SPF</code>와 <code class=\"highlighter-rouge\">DKIM</code>을 활용하여 인증 작업을 진행합니다.</li>\n  <li>인증 작업이 실패하였을 경우 발신자 정보를 통해 <code class=\"highlighter-rouge\">DNS</code>에 <code class=\"highlighter-rouge\">DMARC</code> 레코드를 질의하여 해당 내용을 지정된 이메일 주소로 보고하고 지정된 후속 작업을 처리합니다.</li>\n</ol>\n\n<h1 id=\"마무리\">마무리</h1>\n\n<p>위 기술을 통해 스팸, 피싱, 스푸핑과 같은 악용적인 사례를 방지하는 데 도움을 줄 수 있으며 제가 대량 이메일 발송 처리 작업을 진행하여 스팸함으로 수신되는 이유를 알 수 있도록 도움을 주었습니다. 큰 기업일수록 이는 권장 사항이 아닌 필수 사항으로 도입해야 하는 기술이 아닌가 싶습니다.</p>\n",
    "previous": "/2019/12/09/3-way-app-dev",
    "next": "/2019/12/16/terminology-dimmed-background"
  },
  {
    "id": "/2019/12/09/3-way-app-dev",
    "title": "Web App, Hybrid App, PWA",
    "description": null,
    "date": "2019-12-09 00:00:00 +0900",
    "tags": ["Web","App","Web App","Hybrid App","PWA"],
    "slug": "3-way-app-dev",
    "url": "/2019/12/09/3-way-app-dev",
    "content": "<p><code class=\"highlighter-rouge\">Application</code>을 개발할 때 <em>Web 개발 방식</em>과 <em>Native 개발 방식</em>, 크게 두 가지로 분류할 수 있습니다. 이 두 가지 개발 방식의 큰 차이점은 개발에 사용되는 기술에서 나타납니다. Web 기술을 사용하여 개발하는 방식을 <strong>Web 개발 방식</strong>이라 부를 수 있으며 Native 기술을 사용하여 개발하는 방식을 <strong>Native 개발 방식</strong>이라고 부를 수 있습니다.</p>\n\n<p>위와 같은 개발 방식으로 인해 자주 접하게 되는 3가지 용어가 있는데요, 그 용어에 대한 의미를 알아보는 시간을 가져보도록 하겠습니다.</p>\n\n<blockquote>\n  <p>이 글에서 상세한 내용 보다는 이런게 있다라는 가벼운 시점에서 글을 작성할 것이니 참고 부탁드립니다.</p>\n</blockquote>\n\n<h1 id=\"web-app과-hybrid-app-그리고-pwa\">Web App과 Hybrid App 그리고 PWA</h1>\n\n<h2 id=\"web-app\">Web App</h2>\n\n<p><code class=\"highlighter-rouge\">Web App</code>은 Web과 App의 합성어로 Web 기술을 사용하여 Web 플랫폼의 클라이언트 프로그램인 Browser로 App을 사용 할 수 있도록 개발된 <code class=\"highlighter-rouge\">Application</code>을 지칭하는 용어입니다.</p>\n\n<p>단순하게 문서를 보여주는 Web Site와 달리 특정 문제를 해결하거나 제공하는 서비스에 초점을 맞춰 사용자 인터페이스를 구축하고 필요하면 서버를 통해 요청을 처리 후 응답하여 적절한 결과를 출력하는 일종의 프로그램입니다.</p>\n\n<p>쉽게 말하자면 Web 기술을 사용하여 개발 목표의 초점을 <code class=\"highlighter-rouge\">Application</code>으로 맞추었다고 할 수 있겠습니다.</p>\n\n<h2 id=\"hybrid-app\">Hybrid App</h2>\n\n<p><code class=\"highlighter-rouge\">Hybrid App</code>은 이름에서 알 수 있듯이 무엇인가를 혼합한 <code class=\"highlighter-rouge\">Application</code>이라는 것을 짐작할 수 있습니다. 그렇다면 무엇을 혼합한 것일까요? 그것은 바로 Web 기술과 Native 기술의 혼합입니다.</p>\n\n<p>사용자에게 제공되는 대부분의 기능은 Web 기술로 구현하며 필요할 경우 카메라와 주소록 같은 사용자 기기의 Native 기능을 활용하여 기존 <code class=\"highlighter-rouge\">Web App</code>에서 제공하지 못했던 기능을 구현 할 수 있습니다.</p>\n\n<h2 id=\"pwaprogressive-web-app\">PWA(Progressive Web App)</h2>\n\n<p><code class=\"highlighter-rouge\">Progressive Web App</code>은 위에서 설명한 <code class=\"highlighter-rouge\">Web App</code>에서 몇 가지 추가적인 개념이 덧붙여진 용어입니다. <em>Web App</em>과 <em>Native App</em> 개발의 불편한 점을 해소하기 위해 고안되었고 대체로 다음과 같은 큰 특징이 있습니다.</p>\n\n<ol>\n  <li>캐시를 통해 성능 향상과 오프라인 동작을 지원한다.</li>\n  <li>사용자 기기의 Native 기능을 사용 할 수 있다.</li>\n  <li>모바일 앱과 유사한 사용자 경험을 제공한다.</li>\n</ol>\n\n<p>현재는 추가된 개념적 요소에 의해 <code class=\"highlighter-rouge\">Manifest</code>, <code class=\"highlighter-rouge\">Service Worker</code> 등 추가적으로 알아야 할 지식이 있고 브라우저 벤더 별로 PWA를 지원하느냐 지원 하지 않느냐와 접근 가능한 Native 기능에 대한 제한을 파악해야 하는 번거로움이 있습니다.</p>\n\n<h1 id=\"마무리\">마무리</h1>\n\n<p><code class=\"highlighter-rouge\">Application</code> 개발 방식에 따른 종류 3 가지를 살펴보았는데요, 겉으로 보기에는 <code class=\"highlighter-rouge\">PWA</code>를 개발하는 것이 좋아 보이나 아직 발전 단계에 놓여 있고 시행착오가 적게 발생 할 것 같지는 않아 보이네요. 도입하기 전에 적어도 프로토타입 하나 정도는 만들어 보고 평가해야겠다는 생각이 듭니다.</p>\n",
    "excerpt": "<p><code class=\"highlighter-rouge\">Application</code>을 개발할 때 <em>Web 개발 방식</em>과 <em>Native 개발 방식</em>, 크게 두 가지로 분류할 수 있습니다. 이 두 가지 개발 방식의 큰 차이점은 개발에 사용되는 기술에서 나타납니다. Web 기술을 사용하여 개발하는 방식을 <strong>Web 개발 방식</strong>이라 부를 수 있으며 Native 기술을 사용하여 개발하는 방식을 <strong>Native 개발 방식</strong>이라고 부를 수 있습니다.</p>\n\n<p>위와 같은 개발 방식으로 인해 자주 접하게 되는 3가지 용어가 있는데요, 그 용어에 대한 의미를 알아보는 시간을 가져보도록 하겠습니다.</p>\n\n<blockquote>\n  <p>이 글에서 상세한 내용 보다는 이런게 있다라는 가벼운 시점에서 글을 작성할 것이니 참고 부탁드립니다.</p>\n</blockquote>\n\n<h1 id=\"web-app과-hybrid-app-그리고-pwa\">Web App과 Hybrid App 그리고 PWA</h1>\n\n<h2 id=\"web-app\">Web App</h2>\n\n<p><code class=\"highlighter-rouge\">Web App</code>은 Web과 App의 합성어로 Web 기술을 사용하여 Web 플랫폼의 클라이언트 프로그램인 Browser로 App을 사용 할 수 있도록 개발된 <code class=\"highlighter-rouge\">Application</code>을 지칭하는 용어입니다.</p>\n\n<p>단순하게 문서를 보여주는 Web Site와 달리 특정 문제를 해결하거나 제공하는 서비스에 초점을 맞춰 사용자 인터페이스를 구축하고 필요하면 서버를 통해 요청을 처리 후 응답하여 적절한 결과를 출력하는 일종의 프로그램입니다.</p>\n\n<p>쉽게 말하자면 Web 기술을 사용하여 개발 목표의 초점을 <code class=\"highlighter-rouge\">Application</code>으로 맞추었다고 할 수 있겠습니다.</p>\n\n<h2 id=\"hybrid-app\">Hybrid App</h2>\n\n<p><code class=\"highlighter-rouge\">Hybrid App</code>은 이름에서 알 수 있듯이 무엇인가를 혼합한 <code class=\"highlighter-rouge\">Application</code>이라는 것을 짐작할 수 있습니다. 그렇다면 무엇을 혼합한 것일까요? 그것은 바로 Web 기술과 Native 기술의 혼합입니다.</p>\n\n<p>사용자에게 제공되는 대부분의 기능은 Web 기술로 구현하며 필요할 경우 카메라와 주소록 같은 사용자 기기의 Native 기능을 활용하여 기존 <code class=\"highlighter-rouge\">Web App</code>에서 제공하지 못했던 기능을 구현 할 수 있습니다.</p>\n\n<h2 id=\"pwaprogressive-web-app\">PWA(Progressive Web App)</h2>\n\n<p><code class=\"highlighter-rouge\">Progressive Web App</code>은 위에서 설명한 <code class=\"highlighter-rouge\">Web App</code>에서 몇 가지 추가적인 개념이 덧붙여진 용어입니다. <em>Web App</em>과 <em>Native App</em> 개발의 불편한 점을 해소하기 위해 고안되었고 대체로 다음과 같은 큰 특징이 있습니다.</p>\n\n<ol>\n  <li>캐시를 통해 성능 향상과 오프라인 동작을 지원한다.</li>\n  <li>사용자 기기의 Native 기능을 사용 할 수 있다.</li>\n  <li>모바일 앱과 유사한 사용자 경험을 제공한다.</li>\n</ol>\n\n<p>현재는 추가된 개념적 요소에 의해 <code class=\"highlighter-rouge\">Manifest</code>, <code class=\"highlighter-rouge\">Service Worker</code> 등 추가적으로 알아야 할 지식이 있고 브라우저 벤더 별로 PWA를 지원하느냐 지원 하지 않느냐와 접근 가능한 Native 기능에 대한 제한을 파악해야 하는 번거로움이 있습니다.</p>\n\n<h1 id=\"마무리\">마무리</h1>\n\n<p><code class=\"highlighter-rouge\">Application</code> 개발 방식에 따른 종류 3 가지를 살펴보았는데요, 겉으로 보기에는 <code class=\"highlighter-rouge\">PWA</code>를 개발하는 것이 좋아 보이나 아직 발전 단계에 놓여 있고 시행착오가 적게 발생 할 것 같지는 않아 보이네요. 도입하기 전에 적어도 프로토타입 하나 정도는 만들어 보고 평가해야겠다는 생각이 듭니다.</p>\n",
    "previous": "/2019/12/02/mysql-autocommit-commit-rollback",
    "next": "/2019/12/12/spf-dkim-dmarc"
  },
  {
    "id": "/2019/12/02/mysql-autocommit-commit-rollback",
    "title": "MySQL: autocommit, Commit, and Rollback",
    "description": null,
    "date": "2019-12-02 00:00:00 +0900",
    "tags": ["Database","MySQL","Transaction","Commit","Rollback"],
    "slug": "mysql-autocommit-commit-rollback",
    "url": "/2019/12/02/mysql-autocommit-commit-rollback",
    "content": "<p>MySQL의 autocommit에 대해 기억이 가물가물하여 <em>5.7</em>버전의 ‘14.7.2.2 autocommit, Commit, and Rollback’ 메뉴얼을\n이름은 <em>역기</em>요, 성이 <em>번</em>씨인 조력자(?)와 함께 번역 해보았습니다.</p>\n\n<h1 id=\"14722-autocommit-commit-and-rollback\">14.7.2.2 autocommit, Commit, and Rollback</h1>\n\n<p>InnoDB에서 모든 사용자 활동은 트랜잭션 내에서 발생합니다. <em>autocommit</em> 모드가 사용 가능한 경우 각 SQL문은 자체적으로 단일 트랜잭션을 형성합니다. 기본적으로 MySQL은 <em>autocommit</em>이 활성화된 상태에서 새 연결마다 세션을 시작합니다. 입력된 명령문이 오류를 발생시키지 않으면 MySQL은 각 SQL문 후에 커밋을 수행합니다. 명령문이 오류를 발생시길 경우 커밋 또는 롤백 동작은 오류에 따라 달라집니다. 자세한 내용은 <a href=\"https://dev.mysql.com/doc/refman/5.7/en/innodb-error-handling.html\">14.22.4, “InnoDB Error Handling” 절</a>을 참고해주세요.</p>\n\n<p><em>autocommit</em>이 사용 가능한 세션은 <code class=\"highlighter-rouge\">START TRANSACTION</code> 또는 <code class=\"highlighter-rouge\">BEGIN</code> 문으로 명시적으로 시작하여 <code class=\"highlighter-rouge\">COMMIT</code> 또는 <code class=\"highlighter-rouge\">ROLLBACK</code>문으로 종료하여 다중 명령문 트랜잭션을 수행 할 수 있습니다. 자세한 내용은 <a href=\"https://dev.mysql.com/doc/refman/5.7/en/commit.html\">13.3.1, “START TRANSACTION, COMMIT, and ROLLBACK Statements” 절</a>을 참고해주세요.</p>\n\n<p><code class=\"highlighter-rouge\">SET autocommit = 0</code> 명령문을 통해 세션에서 <em>autocommit</em> 모드를 비활성화하면 해당 세션은 항상 트랜잭션이 열려 있습니다. <code class=\"highlighter-rouge\">COMMIT</code> 또는 <code class=\"highlighter-rouge\">ROLLBACK</code>문은 현재 트랜잭션을 종료하고 새 트랜잭션을 시작합니다.</p>\n\n<p><em>autocommit</em>이 비활성화된 세션이 최종 트랜잭션을 명시적으로 커밋하지 않고 종료되면 MySQL은 해당 트랜잭션을 롤백합니다.</p>\n\n<p>일부 명령문은 명령문을 실행하기 전에 <code class=\"highlighter-rouge\">COMMIT</code>을 수행한 것처럼 트랜잭션을 암시적으로 종료합니다. 자세한 내용은 <a href=\"https://dev.mysql.com/doc/refman/5.7/en/implicit-commit.html\">13.3.3, “Statements That Cause an Implicit Commit” 절</a>을 참고하길 바랍니다.</p>\n\n<p><code class=\"highlighter-rouge\">COMMIT</code>은 현재 트랜잭션에서 작성된 변경 사항이 영구적이며 다른 세션에서 볼 수 있음을 의미합니다. 반면에 <code class=\"highlighter-rouge\">ROLLBACK</code>은 현재 트랜잭션에 의해 작성된 모든 수정 사항을 취소합니다. <code class=\"highlighter-rouge\">COMMIT</code> 및 <code class=\"highlighter-rouge\">ROLLBACK</code>은 현재 트랜잭션에서 설정된 모든 InnoDB 잠금을 해제합니다.</p>\n\n<h2 id=\"트랜잭션과-dml-작업-그룹화\">트랜잭션과 DML 작업 그룹화</h2>\n\n<p>기본적으로 MySQL 서버에 대한 연결은 <em>autocommit</em> 모드가 활성화된 상태에서 시작하여 실행 시 모든 SQL문을 자동으로 커밋합니다. 다른 데이터베이스 시스템에 대한 사용 경험이 있는 경우 이 작동 모드는 익숙하지 않을 수 있습니다. 여기서 DML문 시퀀스를 발행하고 커밋하거나 모두 롤백하는 것이 표준 관행입니다.</p>\n\n<p>다중 명령문 트랜잭션을 사용하려면 <code class=\"highlighter-rouge\">SET autocommit = 0</code> 명령문으로 <em>autocommit</em>을 끄고 각 트랜잭션을 적절하게 <code class=\"highlighter-rouge\">COMMIT</code> 또는 <code class=\"highlighter-rouge\">ROLLBACK</code>으로 종료할 수 있습니다. <em>autocommit을</em> 유지하려면 <code class=\"highlighter-rouge\">START TRANSACTION</code>나 <code class=\"highlighter-rouge\">BEGIN</code>으로 각 트랜잭션을 시작하고 <code class=\"highlighter-rouge\">COMMIT</code> 또는 <code class=\"highlighter-rouge\">ROLLBACK</code>으로 종료할 수 있습니다. 다음 예제는 두 개의 트랜잭션을 보여줍니다. 첫 번째는 커밋되고 두 번째는 롤백됩니다.</p>\n\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>shell&gt; mysql <span class=\"nb\">test</span>\n</code></pre></div></div>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">mysql</span><span class=\"o\">&gt;</span> <span class=\"k\">CREATE</span> <span class=\"k\">TABLE</span> <span class=\"n\">customer</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"nb\">INT</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"nb\">CHAR</span> <span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">),</span> <span class=\"k\">INDEX</span> <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">));</span>\n<span class=\"n\">Query</span> <span class=\"n\">OK</span><span class=\"p\">,</span> <span class=\"mi\">0</span> <span class=\"k\">rows</span> <span class=\"n\">affected</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">00</span> <span class=\"n\">sec</span><span class=\"p\">)</span>\n<span class=\"n\">mysql</span><span class=\"o\">&gt;</span> <span class=\"c1\">-- Do a transaction with autocommit turned on.</span>\n<span class=\"n\">mysql</span><span class=\"o\">&gt;</span> <span class=\"k\">START</span> <span class=\"n\">TRANSACTION</span><span class=\"p\">;</span>\n<span class=\"n\">Query</span> <span class=\"n\">OK</span><span class=\"p\">,</span> <span class=\"mi\">0</span> <span class=\"k\">rows</span> <span class=\"n\">affected</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">00</span> <span class=\"n\">sec</span><span class=\"p\">)</span>\n<span class=\"n\">mysql</span><span class=\"o\">&gt;</span> <span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">customer</span> <span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"s1\">'Heikki'</span><span class=\"p\">);</span>\n<span class=\"n\">Query</span> <span class=\"n\">OK</span><span class=\"p\">,</span> <span class=\"mi\">1</span> <span class=\"k\">row</span> <span class=\"n\">affected</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">00</span> <span class=\"n\">sec</span><span class=\"p\">)</span>\n<span class=\"n\">mysql</span><span class=\"o\">&gt;</span> <span class=\"k\">COMMIT</span><span class=\"p\">;</span>\n<span class=\"n\">Query</span> <span class=\"n\">OK</span><span class=\"p\">,</span> <span class=\"mi\">0</span> <span class=\"k\">rows</span> <span class=\"n\">affected</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">00</span> <span class=\"n\">sec</span><span class=\"p\">)</span>\n<span class=\"n\">mysql</span><span class=\"o\">&gt;</span> <span class=\"c1\">-- Do another transaction with autocommit turned off.</span>\n<span class=\"n\">mysql</span><span class=\"o\">&gt;</span> <span class=\"k\">SET</span> <span class=\"n\">autocommit</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"n\">Query</span> <span class=\"n\">OK</span><span class=\"p\">,</span> <span class=\"mi\">0</span> <span class=\"k\">rows</span> <span class=\"n\">affected</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">00</span> <span class=\"n\">sec</span><span class=\"p\">)</span>\n<span class=\"n\">mysql</span><span class=\"o\">&gt;</span> <span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">customer</span> <span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"s1\">'John'</span><span class=\"p\">);</span>\n<span class=\"n\">Query</span> <span class=\"n\">OK</span><span class=\"p\">,</span> <span class=\"mi\">1</span> <span class=\"k\">row</span> <span class=\"n\">affected</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">00</span> <span class=\"n\">sec</span><span class=\"p\">)</span>\n<span class=\"n\">mysql</span><span class=\"o\">&gt;</span> <span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">customer</span> <span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"s1\">'Paul'</span><span class=\"p\">);</span>\n<span class=\"n\">Query</span> <span class=\"n\">OK</span><span class=\"p\">,</span> <span class=\"mi\">1</span> <span class=\"k\">row</span> <span class=\"n\">affected</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">00</span> <span class=\"n\">sec</span><span class=\"p\">)</span>\n<span class=\"n\">mysql</span><span class=\"o\">&gt;</span> <span class=\"k\">DELETE</span> <span class=\"k\">FROM</span> <span class=\"n\">customer</span> <span class=\"k\">WHERE</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"s1\">'Heikki'</span><span class=\"p\">;</span>\n<span class=\"n\">Query</span> <span class=\"n\">OK</span><span class=\"p\">,</span> <span class=\"mi\">1</span> <span class=\"k\">row</span> <span class=\"n\">affected</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">00</span> <span class=\"n\">sec</span><span class=\"p\">)</span>\n<span class=\"n\">mysql</span><span class=\"o\">&gt;</span> <span class=\"c1\">-- Now we undo those last 2 inserts and the delete.</span>\n<span class=\"n\">mysql</span><span class=\"o\">&gt;</span> <span class=\"k\">ROLLBACK</span><span class=\"p\">;</span>\n<span class=\"n\">Query</span> <span class=\"n\">OK</span><span class=\"p\">,</span> <span class=\"mi\">0</span> <span class=\"k\">rows</span> <span class=\"n\">affected</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">00</span> <span class=\"n\">sec</span><span class=\"p\">)</span>\n<span class=\"n\">mysql</span><span class=\"o\">&gt;</span> <span class=\"k\">SELECT</span> <span class=\"o\">*</span> <span class=\"k\">FROM</span> <span class=\"n\">customer</span><span class=\"p\">;</span>\n<span class=\"o\">+</span><span class=\"c1\">------+--------+</span>\n<span class=\"o\">|</span> <span class=\"n\">a</span>    <span class=\"o\">|</span> <span class=\"n\">b</span>      <span class=\"o\">|</span>\n<span class=\"o\">+</span><span class=\"c1\">------+--------+</span>\n<span class=\"o\">|</span>   <span class=\"mi\">10</span> <span class=\"o\">|</span> <span class=\"n\">Heikki</span> <span class=\"o\">|</span>\n<span class=\"o\">+</span><span class=\"c1\">------+--------+</span>\n<span class=\"mi\">1</span> <span class=\"k\">row</span> <span class=\"k\">in</span> <span class=\"k\">set</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">00</span> <span class=\"n\">sec</span><span class=\"p\">)</span>\n<span class=\"n\">mysql</span><span class=\"o\">&gt;</span>\n</code></pre></div></div>\n\n<h2 id=\"클라이언트-측-언어에서의-트랜잭션\">클라이언트 측 언어에서의 트랜잭션</h2>\n\n<p>PHP, Perl DBI, JDBC, ODBC 또는 MySQL의 표준 C 호출 인터페이스와 같은 API에서 <code class=\"highlighter-rouge\">COMMIT</code>과 같은 트랜잭션 제어 명령문을 <code class=\"highlighter-rouge\">SELECT</code> 또는 <code class=\"highlighter-rouge\">INSERT</code>와 같은 다른 SQL문과 마찬가지로 문자열로 MySQL 서버에 보낼 수 있습니다. 일부 API는 별도의 특수 트랜잭션 <code class=\"highlighter-rouge\">COMMIT</code>과 및 <code class=\"highlighter-rouge\">ROLLBACK</code> 함수 또는 메소드를 제공합니다.</p>\n\n<h1 id=\"마무리\">마무리</h1>\n\n<blockquote>\n  <p>원문: https://dev.mysql.com/doc/refman/5.7/en/innodb-autocommit-commit-rollback.html</p>\n</blockquote>\n",
    "excerpt": "<p>MySQL의 autocommit에 대해 기억이 가물가물하여 <em>5.7</em>버전의 ‘14.7.2.2 autocommit, Commit, and Rollback’ 메뉴얼을\n이름은 <em>역기</em>요, 성이 <em>번</em>씨인 조력자(?)와 함께 번역 해보았습니다.</p>\n\n<h1 id=\"14722-autocommit-commit-and-rollback\">14.7.2.2 autocommit, Commit, and Rollback</h1>\n\n<p>InnoDB에서 모든 사용자 활동은 트랜잭션 내에서 발생합니다. <em>autocommit</em> 모드가 사용 가능한 경우 각 SQL문은 자체적으로 단일 트랜잭션을 형성합니다. 기본적으로 MySQL은 <em>autocommit</em>이 활성화된 상태에서 새 연결마다 세션을 시작합니다. 입력된 명령문이 오류를 발생시키지 않으면 MySQL은 각 SQL문 후에 커밋을 수행합니다. 명령문이 오류를 발생시길 경우 커밋 또는 롤백 동작은 오류에 따라 달라집니다. 자세한 내용은 <a href=\"https://dev.mysql.com/doc/refman/5.7/en/innodb-error-handling.html\">14.22.4, “InnoDB Error Handling” 절</a>을 참고해주세요.</p>\n\n<p><em>autocommit</em>이 사용 가능한 세션은 <code class=\"highlighter-rouge\">START TRANSACTION</code> 또는 <code class=\"highlighter-rouge\">BEGIN</code> 문으로 명시적으로 시작하여 <code class=\"highlighter-rouge\">COMMIT</code> 또는 <code class=\"highlighter-rouge\">ROLLBACK</code>문으로 종료하여 다중 명령문 트랜잭션을 수행 할 수 있습니다. 자세한 내용은 <a href=\"https://dev.mysql.com/doc/refman/5.7/en/commit.html\">13.3.1, “START TRANSACTION, COMMIT, and ROLLBACK Statements” 절</a>을 참고해주세요.</p>\n\n<p><code class=\"highlighter-rouge\">SET autocommit = 0</code> 명령문을 통해 세션에서 <em>autocommit</em> 모드를 비활성화하면 해당 세션은 항상 트랜잭션이 열려 있습니다. <code class=\"highlighter-rouge\">COMMIT</code> 또는 <code class=\"highlighter-rouge\">ROLLBACK</code>문은 현재 트랜잭션을 종료하고 새 트랜잭션을 시작합니다.</p>\n\n<p><em>autocommit</em>이 비활성화된 세션이 최종 트랜잭션을 명시적으로 커밋하지 않고 종료되면 MySQL은 해당 트랜잭션을 롤백합니다.</p>\n\n<p>일부 명령문은 명령문을 실행하기 전에 <code class=\"highlighter-rouge\">COMMIT</code>을 수행한 것처럼 트랜잭션을 암시적으로 종료합니다. 자세한 내용은 <a href=\"https://dev.mysql.com/doc/refman/5.7/en/implicit-commit.html\">13.3.3, “Statements That Cause an Implicit Commit” 절</a>을 참고하길 바랍니다.</p>\n\n<p><code class=\"highlighter-rouge\">COMMIT</code>은 현재 트랜잭션에서 작성된 변경 사항이 영구적이며 다른 세션에서 볼 수 있음을 의미합니다. 반면에 <code class=\"highlighter-rouge\">ROLLBACK</code>은 현재 트랜잭션에 의해 작성된 모든 수정 사항을 취소합니다. <code class=\"highlighter-rouge\">COMMIT</code> 및 <code class=\"highlighter-rouge\">ROLLBACK</code>은 현재 트랜잭션에서 설정된 모든 InnoDB 잠금을 해제합니다.</p>\n\n<h2 id=\"트랜잭션과-dml-작업-그룹화\">트랜잭션과 DML 작업 그룹화</h2>\n\n<p>기본적으로 MySQL 서버에 대한 연결은 <em>autocommit</em> 모드가 활성화된 상태에서 시작하여 실행 시 모든 SQL문을 자동으로 커밋합니다. 다른 데이터베이스 시스템에 대한 사용 경험이 있는 경우 이 작동 모드는 익숙하지 않을 수 있습니다. 여기서 DML문 시퀀스를 발행하고 커밋하거나 모두 롤백하는 것이 표준 관행입니다.</p>\n\n<p>다중 명령문 트랜잭션을 사용하려면 <code class=\"highlighter-rouge\">SET autocommit = 0</code> 명령문으로 <em>autocommit</em>을 끄고 각 트랜잭션을 적절하게 <code class=\"highlighter-rouge\">COMMIT</code> 또는 <code class=\"highlighter-rouge\">ROLLBACK</code>으로 종료할 수 있습니다. <em>autocommit을</em> 유지하려면 <code class=\"highlighter-rouge\">START TRANSACTION</code>나 <code class=\"highlighter-rouge\">BEGIN</code>으로 각 트랜잭션을 시작하고 <code class=\"highlighter-rouge\">COMMIT</code> 또는 <code class=\"highlighter-rouge\">ROLLBACK</code>으로 종료할 수 있습니다. 다음 예제는 두 개의 트랜잭션을 보여줍니다. 첫 번째는 커밋되고 두 번째는 롤백됩니다.</p>\n\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>shell&gt; mysql <span class=\"nb\">test</span>\n</code></pre></div></div>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">mysql</span><span class=\"o\">&gt;</span> <span class=\"k\">CREATE</span> <span class=\"k\">TABLE</span> <span class=\"n\">customer</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"nb\">INT</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"nb\">CHAR</span> <span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">),</span> <span class=\"k\">INDEX</span> <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">));</span>\n<span class=\"n\">Query</span> <span class=\"n\">OK</span><span class=\"p\">,</span> <span class=\"mi\">0</span> <span class=\"k\">rows</span> <span class=\"n\">affected</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">00</span> <span class=\"n\">sec</span><span class=\"p\">)</span>\n<span class=\"n\">mysql</span><span class=\"o\">&gt;</span> <span class=\"c1\">-- Do a transaction with autocommit turned on.</span>\n<span class=\"n\">mysql</span><span class=\"o\">&gt;</span> <span class=\"k\">START</span> <span class=\"n\">TRANSACTION</span><span class=\"p\">;</span>\n<span class=\"n\">Query</span> <span class=\"n\">OK</span><span class=\"p\">,</span> <span class=\"mi\">0</span> <span class=\"k\">rows</span> <span class=\"n\">affected</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">00</span> <span class=\"n\">sec</span><span class=\"p\">)</span>\n<span class=\"n\">mysql</span><span class=\"o\">&gt;</span> <span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">customer</span> <span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"s1\">'Heikki'</span><span class=\"p\">);</span>\n<span class=\"n\">Query</span> <span class=\"n\">OK</span><span class=\"p\">,</span> <span class=\"mi\">1</span> <span class=\"k\">row</span> <span class=\"n\">affected</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">00</span> <span class=\"n\">sec</span><span class=\"p\">)</span>\n<span class=\"n\">mysql</span><span class=\"o\">&gt;</span> <span class=\"k\">COMMIT</span><span class=\"p\">;</span>\n<span class=\"n\">Query</span> <span class=\"n\">OK</span><span class=\"p\">,</span> <span class=\"mi\">0</span> <span class=\"k\">rows</span> <span class=\"n\">affected</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">00</span> <span class=\"n\">sec</span><span class=\"p\">)</span>\n<span class=\"n\">mysql</span><span class=\"o\">&gt;</span> <span class=\"c1\">-- Do another transaction with autocommit turned off.</span>\n<span class=\"n\">mysql</span><span class=\"o\">&gt;</span> <span class=\"k\">SET</span> <span class=\"n\">autocommit</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"n\">Query</span> <span class=\"n\">OK</span><span class=\"p\">,</span> <span class=\"mi\">0</span> <span class=\"k\">rows</span> <span class=\"n\">affected</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">00</span> <span class=\"n\">sec</span><span class=\"p\">)</span>\n<span class=\"n\">mysql</span><span class=\"o\">&gt;</span> <span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">customer</span> <span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"s1\">'John'</span><span class=\"p\">);</span>\n<span class=\"n\">Query</span> <span class=\"n\">OK</span><span class=\"p\">,</span> <span class=\"mi\">1</span> <span class=\"k\">row</span> <span class=\"n\">affected</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">00</span> <span class=\"n\">sec</span><span class=\"p\">)</span>\n<span class=\"n\">mysql</span><span class=\"o\">&gt;</span> <span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">customer</span> <span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"s1\">'Paul'</span><span class=\"p\">);</span>\n<span class=\"n\">Query</span> <span class=\"n\">OK</span><span class=\"p\">,</span> <span class=\"mi\">1</span> <span class=\"k\">row</span> <span class=\"n\">affected</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">00</span> <span class=\"n\">sec</span><span class=\"p\">)</span>\n<span class=\"n\">mysql</span><span class=\"o\">&gt;</span> <span class=\"k\">DELETE</span> <span class=\"k\">FROM</span> <span class=\"n\">customer</span> <span class=\"k\">WHERE</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"s1\">'Heikki'</span><span class=\"p\">;</span>\n<span class=\"n\">Query</span> <span class=\"n\">OK</span><span class=\"p\">,</span> <span class=\"mi\">1</span> <span class=\"k\">row</span> <span class=\"n\">affected</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">00</span> <span class=\"n\">sec</span><span class=\"p\">)</span>\n<span class=\"n\">mysql</span><span class=\"o\">&gt;</span> <span class=\"c1\">-- Now we undo those last 2 inserts and the delete.</span>\n<span class=\"n\">mysql</span><span class=\"o\">&gt;</span> <span class=\"k\">ROLLBACK</span><span class=\"p\">;</span>\n<span class=\"n\">Query</span> <span class=\"n\">OK</span><span class=\"p\">,</span> <span class=\"mi\">0</span> <span class=\"k\">rows</span> <span class=\"n\">affected</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">00</span> <span class=\"n\">sec</span><span class=\"p\">)</span>\n<span class=\"n\">mysql</span><span class=\"o\">&gt;</span> <span class=\"k\">SELECT</span> <span class=\"o\">*</span> <span class=\"k\">FROM</span> <span class=\"n\">customer</span><span class=\"p\">;</span>\n<span class=\"o\">+</span><span class=\"c1\">------+--------+</span>\n<span class=\"o\">|</span> <span class=\"n\">a</span>    <span class=\"o\">|</span> <span class=\"n\">b</span>      <span class=\"o\">|</span>\n<span class=\"o\">+</span><span class=\"c1\">------+--------+</span>\n<span class=\"o\">|</span>   <span class=\"mi\">10</span> <span class=\"o\">|</span> <span class=\"n\">Heikki</span> <span class=\"o\">|</span>\n<span class=\"o\">+</span><span class=\"c1\">------+--------+</span>\n<span class=\"mi\">1</span> <span class=\"k\">row</span> <span class=\"k\">in</span> <span class=\"k\">set</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">00</span> <span class=\"n\">sec</span><span class=\"p\">)</span>\n<span class=\"n\">mysql</span><span class=\"o\">&gt;</span>\n</code></pre></div></div>\n\n<h2 id=\"클라이언트-측-언어에서의-트랜잭션\">클라이언트 측 언어에서의 트랜잭션</h2>\n\n<p>PHP, Perl DBI, JDBC, ODBC 또는 MySQL의 표준 C 호출 인터페이스와 같은 API에서 <code class=\"highlighter-rouge\">COMMIT</code>과 같은 트랜잭션 제어 명령문을 <code class=\"highlighter-rouge\">SELECT</code> 또는 <code class=\"highlighter-rouge\">INSERT</code>와 같은 다른 SQL문과 마찬가지로 문자열로 MySQL 서버에 보낼 수 있습니다. 일부 API는 별도의 특수 트랜잭션 <code class=\"highlighter-rouge\">COMMIT</code>과 및 <code class=\"highlighter-rouge\">ROLLBACK</code> 함수 또는 메소드를 제공합니다.</p>\n\n<h1 id=\"마무리\">마무리</h1>\n\n<blockquote>\n  <p>원문: https://dev.mysql.com/doc/refman/5.7/en/innodb-autocommit-commit-rollback.html</p>\n</blockquote>\n",
    "previous": "/2019/12/01/use-ssg-3",
    "next": "/2019/12/09/3-way-app-dev"
  },
  {
    "id": "/2019/12/01/use-ssg-3",
    "title": "나만의 블로그를 고급지게 만들어보자 (3)",
    "description": null,
    "date": "2019-12-01 00:00:00 +0900",
    "tags": ["나만의 블로그를 고급지게 만들어보자","Jekyll","SSG","Ruby","Liquid","Github"],
    "slug": "use-ssg-3",
    "url": "/2019/12/01/use-ssg-3",
    "content": "<p>이번 장에서는 블로그의 핵심인 페이지와 포스트에 대해서 알아보는 시간을 가지겠습니다.</p>\n\n<h1 id=\"페이지\">페이지</h1>\n\n<p>Jekyll에서 페이지를 생성하는 방법은 프로젝트 루트 디렉토리 내에 파일을 생성하면 됩니다.\n언뜻 보기엔 간단하나 몇 가지 숙지해야 할 사항이 있습니다.</p>\n\n<ul>\n  <li>URL의 경로와 파일 경로를 매핑하여 어떤 파일을 서빙할지 결정합니다.</li>\n  <li>디렉토리 명이 <code class=\"highlighter-rouge\">_</code>로 시작되는 디렉토리의 모든 하위 파일들은 빌드 대상에서 제외됩니다.</li>\n  <li>환경설정에 exclude 정의에 포함된 디렉토리\b나 파일은 빌드 시 제외됩니다.</li>\n  <li>마크다운은 빌드 시 HTML 파일로 변환됩니다.</li>\n</ul>\n\n<h2 id=\"파일-매핑\">파일 매핑</h2>\n\n<p>URL의 경로와 파일 경로를 매팽하여 어떤 파일을 서빙할 것인지 결정한다고 하였습니다.\n여기서 서빙할 파일을 결정할 때 진행되는 처리 순서가 있습니다.</p>\n\n<ol>\n  <li>파일 확장자를 명시할 경우 정확히 해당 경로에 명시한 파일을 찾습니다.</li>\n  <li>파일 확장자를 명시하지 않은 경우 먼저 해당 경로에 있는 디렉토리를 찾습니다.</li>\n  <li>디렉토리가 있을 경우 해당 디렉토리 내에서 <code class=\"highlighter-rouge\">index.html</code> 파일을 찾습니다.</li>\n  <li><code class=\"highlighter-rouge\">index.html</code> 파일이 없을 경우 찾고자 하는 디렉토리 명에 <code class=\"highlighter-rouge\">.html</code> 붙여 파일을 찾습니다.</li>\n  <li>서빙할 파일을 찾지 못하면 루트 경로에 <code class=\"highlighter-rouge\">404.html</code> 파일을 찾습니다.</li>\n  <li><code class=\"highlighter-rouge\">404.html</code> 파일을 찾지 못하면 <code class=\"highlighter-rouge\">404 오류</code>를 응답합니다.</li>\n</ol>\n\n<p><code class=\"highlighter-rouge\">Cayman</code> 테마에는 기본적으로 프로젝트 루트 디렉토리에 <code class=\"highlighter-rouge\">index.html</code> 파일이 존재합니다.\n그렇기 때문에 로컬 서버를 시작하고 브라우저로 <code class=\"highlighter-rouge\">localhost:4000</code>에 접속하게 되면\n위 매핑 순서에 따라 루트 디렉토리에서 <code class=\"highlighter-rouge\">index.html</code> 파일을 찾고 해당 파일을 서빙하게 됩니다.</p>\n\n<p>페이지에 대한 더 자세한 내용은 <a href=\"https://jekyllrb-ko.github.io/docs/pages/\">여기</a>를 참고해주세요.</p>\n\n<h1 id=\"포스트\">포스트</h1>\n\n<p>포스트의 경우 페이지와 비슷하게 파일을 생성하여 서빙할 수 있습니다만, 추가적으로 숙지해야 할 사항이 있습니다.</p>\n\n<ul>\n  <li>프로젝트 루트 디렉토리에서 <code class=\"highlighter-rouge\">_posts</code> 디렉토리 내에 작성할 포스트를 파일로 생성합니다.</li>\n  <li>파일명은 <code class=\"highlighter-rouge\">YYYY-MM-DD-file-name.ext</code> 형식으로 지정해야합니다(통상 <em>file-name</em>은 포스트 타이틀로 정합니다).</li>\n  <li>별다른 환경설정을 사용자 정의하지 않았으면 빌드 후 포스트의 URL 경로는 <code class=\"highlighter-rouge\">/YYYY/MM/DD/file-name.html</code>입니다.</li>\n</ul>\n\n<p>자, 한 번 실제로 포스트를 하나 작성해봅시다. 먼저 프로젝트 루트 디렉토리 <code class=\"highlighter-rouge\">_posts</code> 디렉토리를 생성하고\n오늘 날짜와 작성하고자 하는 주제를 정해서 파일명을 만들고 파일을 생성해보세요.</p>\n\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span><span class=\"nb\">mkdir </span>_posts <span class=\"o\">&amp;&amp;</span> <span class=\"nb\">cd </span>_posts\n<span class=\"nv\">$ </span><span class=\"nb\">touch </span>19-12-03-hello-world.md\n</code></pre></div></div>\n\n<p>그리고 해당 파일 상단에 Front Matter를 포함시켜 다음과 같이 이 포스트에 대한 레이아웃, 타이틀, 설명을 정의합니다.</p>\n\n<div class=\"language-markdown highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nn\">---</span>\n<span class=\"na\">layout</span><span class=\"pi\">:</span> <span class=\"s\">default</span>\n<span class=\"na\">title</span><span class=\"pi\">:</span> <span class=\"s\">Hello, World!</span>\n<span class=\"na\">description</span><span class=\"pi\">:</span> <span class=\"s\">This is first post.</span>\n<span class=\"nn\">---</span>\n</code></pre></div></div>\n\n<p>이제 브라우저에서 <code class=\"highlighter-rouge\">/2019/12/03/hello-world.html</code>로 요청을 보내면 방금 전에 만들었던 마크다운 파일을\nHTML로 변환 후 레이아웃을 적용시켜 서빙된 페이지를 보실 수 있습니다.</p>\n\n<p>포스트에 대한 더 자세한 내용은 <a href=\"https://jekyllrb-ko.github.io/docs/posts/\">여기</a>를 참고해주세요.</p>\n\n<h1 id=\"마무리\">마무리</h1>\n\n<p>지금까지 Jekyll을 이용한 정적 사이트 개발 환경을 구성으로 시작하여 페이지와 포스트 작성에 대해 알아보았습니다.\n이외에도 Jekyll은 다양한 기능 제공하며 <code class=\"highlighter-rouge\">Sass/SCSS</code> 통해 페이지를 스타일링 할 수 있고 플러그인을 통해\n기능을 확장 할 수도 있습니다. Jekyll을 더 깊게 사용해보고 싶으신 분들은 <a href=\"https://jekyllrb.com/\">공식 문서</a>나\n공식 문서를 번역한 <a href=\"https://jekyllrb-ko.github.io/\">이곳</a>을 참고하길 바랍니다.</p>\n",
    "excerpt": "<p>이번 장에서는 블로그의 핵심인 페이지와 포스트에 대해서 알아보는 시간을 가지겠습니다.</p>\n\n<h1 id=\"페이지\">페이지</h1>\n\n<p>Jekyll에서 페이지를 생성하는 방법은 프로젝트 루트 디렉토리 내에 파일을 생성하면 됩니다.\n언뜻 보기엔 간단하나 몇 가지 숙지해야 할 사항이 있습니다.</p>\n\n<ul>\n  <li>URL의 경로와 파일 경로를 매핑하여 어떤 파일을 서빙할지 결정합니다.</li>\n  <li>디렉토리 명이 <code class=\"highlighter-rouge\">_</code>로 시작되는 디렉토리의 모든 하위 파일들은 빌드 대상에서 제외됩니다.</li>\n  <li>환경설정에 exclude 정의에 포함된 디렉토리\b나 파일은 빌드 시 제외됩니다.</li>\n  <li>마크다운은 빌드 시 HTML 파일로 변환됩니다.</li>\n</ul>\n\n<h2 id=\"파일-매핑\">파일 매핑</h2>\n\n<p>URL의 경로와 파일 경로를 매팽하여 어떤 파일을 서빙할 것인지 결정한다고 하였습니다.\n여기서 서빙할 파일을 결정할 때 진행되는 처리 순서가 있습니다.</p>\n\n<ol>\n  <li>파일 확장자를 명시할 경우 정확히 해당 경로에 명시한 파일을 찾습니다.</li>\n  <li>파일 확장자를 명시하지 않은 경우 먼저 해당 경로에 있는 디렉토리를 찾습니다.</li>\n  <li>디렉토리가 있을 경우 해당 디렉토리 내에서 <code class=\"highlighter-rouge\">index.html</code> 파일을 찾습니다.</li>\n  <li><code class=\"highlighter-rouge\">index.html</code> 파일이 없을 경우 찾고자 하는 디렉토리 명에 <code class=\"highlighter-rouge\">.html</code> 붙여 파일을 찾습니다.</li>\n  <li>서빙할 파일을 찾지 못하면 루트 경로에 <code class=\"highlighter-rouge\">404.html</code> 파일을 찾습니다.</li>\n  <li><code class=\"highlighter-rouge\">404.html</code> 파일을 찾지 못하면 <code class=\"highlighter-rouge\">404 오류</code>를 응답합니다.</li>\n</ol>\n\n<p><code class=\"highlighter-rouge\">Cayman</code> 테마에는 기본적으로 프로젝트 루트 디렉토리에 <code class=\"highlighter-rouge\">index.html</code> 파일이 존재합니다.\n그렇기 때문에 로컬 서버를 시작하고 브라우저로 <code class=\"highlighter-rouge\">localhost:4000</code>에 접속하게 되면\n위 매핑 순서에 따라 루트 디렉토리에서 <code class=\"highlighter-rouge\">index.html</code> 파일을 찾고 해당 파일을 서빙하게 됩니다.</p>\n\n<p>페이지에 대한 더 자세한 내용은 <a href=\"https://jekyllrb-ko.github.io/docs/pages/\">여기</a>를 참고해주세요.</p>\n\n<h1 id=\"포스트\">포스트</h1>\n\n<p>포스트의 경우 페이지와 비슷하게 파일을 생성하여 서빙할 수 있습니다만, 추가적으로 숙지해야 할 사항이 있습니다.</p>\n\n<ul>\n  <li>프로젝트 루트 디렉토리에서 <code class=\"highlighter-rouge\">_posts</code> 디렉토리 내에 작성할 포스트를 파일로 생성합니다.</li>\n  <li>파일명은 <code class=\"highlighter-rouge\">YYYY-MM-DD-file-name.ext</code> 형식으로 지정해야합니다(통상 <em>file-name</em>은 포스트 타이틀로 정합니다).</li>\n  <li>별다른 환경설정을 사용자 정의하지 않았으면 빌드 후 포스트의 URL 경로는 <code class=\"highlighter-rouge\">/YYYY/MM/DD/file-name.html</code>입니다.</li>\n</ul>\n\n<p>자, 한 번 실제로 포스트를 하나 작성해봅시다. 먼저 프로젝트 루트 디렉토리 <code class=\"highlighter-rouge\">_posts</code> 디렉토리를 생성하고\n오늘 날짜와 작성하고자 하는 주제를 정해서 파일명을 만들고 파일을 생성해보세요.</p>\n\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span><span class=\"nb\">mkdir </span>_posts <span class=\"o\">&amp;&amp;</span> <span class=\"nb\">cd </span>_posts\n<span class=\"nv\">$ </span><span class=\"nb\">touch </span>19-12-03-hello-world.md\n</code></pre></div></div>\n\n<p>그리고 해당 파일 상단에 Front Matter를 포함시켜 다음과 같이 이 포스트에 대한 레이아웃, 타이틀, 설명을 정의합니다.</p>\n\n<div class=\"language-markdown highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nn\">---</span>\n<span class=\"na\">layout</span><span class=\"pi\">:</span> <span class=\"s\">default</span>\n<span class=\"na\">title</span><span class=\"pi\">:</span> <span class=\"s\">Hello, World!</span>\n<span class=\"na\">description</span><span class=\"pi\">:</span> <span class=\"s\">This is first post.</span>\n<span class=\"nn\">---</span>\n</code></pre></div></div>\n\n<p>이제 브라우저에서 <code class=\"highlighter-rouge\">/2019/12/03/hello-world.html</code>로 요청을 보내면 방금 전에 만들었던 마크다운 파일을\nHTML로 변환 후 레이아웃을 적용시켜 서빙된 페이지를 보실 수 있습니다.</p>\n\n<p>포스트에 대한 더 자세한 내용은 <a href=\"https://jekyllrb-ko.github.io/docs/posts/\">여기</a>를 참고해주세요.</p>\n\n<h1 id=\"마무리\">마무리</h1>\n\n<p>지금까지 Jekyll을 이용한 정적 사이트 개발 환경을 구성으로 시작하여 페이지와 포스트 작성에 대해 알아보았습니다.\n이외에도 Jekyll은 다양한 기능 제공하며 <code class=\"highlighter-rouge\">Sass/SCSS</code> 통해 페이지를 스타일링 할 수 있고 플러그인을 통해\n기능을 확장 할 수도 있습니다. Jekyll을 더 깊게 사용해보고 싶으신 분들은 <a href=\"https://jekyllrb.com/\">공식 문서</a>나\n공식 문서를 번역한 <a href=\"https://jekyllrb-ko.github.io/\">이곳</a>을 참고하길 바랍니다.</p>\n",
    "previous": "/2019/12/01/use-ssg-2",
    "next": "/2019/12/02/mysql-autocommit-commit-rollback"
  },
  {
    "id": "/2019/12/01/use-ssg-2",
    "title": "나만의 블로그를 고급지게 만들어보자 (2)",
    "description": null,
    "date": "2019-12-01 00:00:00 +0900",
    "tags": ["나만의 블로그를 고급지게 만들어보자","Jekyll","SSG","Ruby","Liquid","Github"],
    "slug": "use-ssg-2",
    "url": "/2019/12/01/use-ssg-2",
    "content": "<p>이번 장에는 이전 장에서 언급했던 것 처럼 Jekyll의 환결설정과 Front Matter에 대해 알아보겠습니다.</p>\n\n<h1 id=\"환경설정\">환경설정</h1>\n\n<p>여기서 환경설정의 의미는 Jekyll의 개발부터 빌드에 관여하는 기능들이 참조할 값들을 설정하는 것을 의미합니다.\n미리 정의된 변수가 존재하며 있고 이를 비롯해서 다양한 변수를 사용자 정의 할 수 있습니다.\n다양하고 많은 설정 값들이 존재하기 때문에 이 글에서는 간단히 전역 변수에 대한 기능을 다루고 넘어가겠습니다.\n보다 자세한 내용은 <a href=\"https://jekyllrb-ko.github.io/docs/configuration/\">여기</a>를 참고하길 바랍니다.</p>\n\n<p>Jekyll은 YAML을 사용하여 프로젝트 루트 디렉토리에서 <code class=\"highlighter-rouge\">_config.yml</code> 파일을 통해 환경설정을 정의합니다.\n본격적으로 환경설정하기 전에 YAML에 대해 간단히 알아보고 갑시다.</p>\n\n<h2 id=\"yaml\">YAML</h2>\n\n<p>YAML은 ‘YAML Ain’t Markup Language’의 약어로 데이터 직렬화 양식 중 하나입니다. JSON이나 XML 등\n다른 양식에 비해 상대적으로 문법이 간결합니다. <code class=\"highlighter-rouge\">Sequence</code>, <code class=\"highlighter-rouge\">Mappings</code> 등 다양한 조함으로 데이터를 구조화하고 표현합니다.</p>\n\n<h3 id=\"sequence\">Sequence</h3>\n\n<p>Sequence는 <code class=\"highlighter-rouge\">[</code>와 <code class=\"highlighter-rouge\">]</code> 또는 <code class=\"highlighter-rouge\">-</code>에 의해 나열된 요소의 그룹으로 표현되며 <code class=\"highlighter-rouge\">Flow Sequnce</code>와 <code class=\"highlighter-rouge\">Block Sequence</code>라는 두 가지 표현 방식이 있습니다.</p>\n\n<div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Flow Sequnce</span>\n<span class=\"pi\">[</span> <span class=\"nv\">first</span><span class=\"pi\">,</span> <span class=\"nv\">second</span><span class=\"pi\">,</span> <span class=\"nv\">third</span> <span class=\"pi\">]</span>\n\n<span class=\"c1\"># Block Sequence</span>\n<span class=\"pi\">-</span> <span class=\"s\">first</span>\n<span class=\"pi\">-</span> <span class=\"s\">second</span>\n<span class=\"pi\">-</span> <span class=\"s\">third</span>\n</code></pre></div></div>\n\n<h3 id=\"mappings\">Mappings</h3>\n\n<p>Mappings는 <code class=\"highlighter-rouge\">{</code>과 <code class=\"highlighter-rouge\">}</code> 또는 <code class=\"highlighter-rouge\">:</code>에 의해 키와 값으로 표현되며 <code class=\"highlighter-rouge\">Flow Mappings</code>와 <code class=\"highlighter-rouge\">Block Mappings</code> 두 가지 표현 방식이 있습니다.</p>\n\n<div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Flow Mappings</span>\n<span class=\"pi\">{</span> <span class=\"nv\">first</span><span class=\"pi\">:</span> <span class=\"nv\">1</span><span class=\"pi\">,</span> <span class=\"nv\">second</span><span class=\"pi\">:</span> <span class=\"nv\">2</span><span class=\"pi\">,</span> <span class=\"nv\">third</span><span class=\"pi\">:</span> <span class=\"nv\">3</span> <span class=\"pi\">}</span>\n\n<span class=\"c1\"># Block Mappings</span>\n<span class=\"na\">first</span><span class=\"pi\">:</span> <span class=\"m\">1</span>\n<span class=\"na\">second</span><span class=\"pi\">:</span> <span class=\"m\">2</span>\n<span class=\"na\">third</span><span class=\"pi\">:</span> <span class=\"m\">3</span>\n</code></pre></div></div>\n\n<h2 id=\"환경설정-정의\">환경설정 정의</h2>\n\n<p>Cayman 테마에서는 기본적으로 _config.yml 파알에 만들고자 하는 사이트의 타이틀과 설명에 대한 변수를 정의하고 있습니다.\n이 값들을 여러분께서 직접 적절히 수정 후 파일을 저장해주세요.</p>\n\n<div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"na\">title</span><span class=\"pi\">:</span> <span class=\"s\">Mouse's Logs</span>\n<span class=\"na\">description</span><span class=\"pi\">:</span> <span class=\"s\">Just Simple Log Collection</span>\n</code></pre></div></div>\n\n<p>여기서 정의된 값은 Liquid 템플릿 언어를 통해 미리 선언된 <code class=\"highlighter-rouge\">site</code> 객체 변수의 인스턴스 변수로써 접근할 수 있습니다.\n<code class=\"highlighter-rouge\">_includes</code> 디렉토리의 default.html 파일을 열어 보시면 아래와 같은 내용을 볼 수 있습니다.</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;h1</span> <span class=\"na\">class=</span><span class=\"s\">\"project-name\"</span><span class=\"nt\">&gt;</span>나만의 블로그를 고급지게 만들어보자 (2)<span class=\"nt\">&lt;/h1&gt;</span>\n</code></pre></div></div>\n\n<p>여기서 표현된 이중 중괄호는 Liquid에서 제공되는 기능으로 <code class=\"highlighter-rouge\">Interpolation</code>이라고 부릅니다. 이 기능은 Liquid에 의해\n이중 중괄호를 포함한 내용을 이중 중괄호 안의 내용을 처리하고 반환된 결과값으로 대체합니다. 결과적으로 여기서 해당 줄은\n<code class=\"highlighter-rouge\">site.title</code> 값으로 대체하고 다음과 같이 변환됩니다.</p>\n\n<blockquote>\n  <p>이중 중괄호 안의 내용은 다음 장에서 설명됩니다.</p>\n</blockquote>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;h1</span> <span class=\"na\">class=</span><span class=\"s\">\"project-name\"</span><span class=\"nt\">&gt;</span>Mouse's Logs<span class=\"nt\">&lt;/h1&gt;</span>\n</code></pre></div></div>\n\n<p>이 단락의 핵심 뷰 포인트는 환경설정을 통해 값을 정의하고 Liquid를 통해 해당 값을 변수로써 접근하여 다양한 제어가 가능하다는 것입니다.</p>\n\n<h1 id=\"front-matter\">Front Matter</h1>\n\n<p>Front Matter 또한 환경설정처럼 YAML을 사용하여 데이터를 정의합니다. 동작은 환경설정과 거의 비슷하지만 한 가지 뚜렷한 차이점이 있습니다.\nFront Matter를 선언 파일은 Jekyll에서 해당 파일을 특별하게 취급하고 처리를 합니다. Liquid를 사용 할 수 있는 기준이 되기도 합니다.\n주의해야 할 사항은 이 Front Matter는 반드시 파일의 최상단에 위치해야 하고 <code class=\"highlighter-rouge\">---</code>로 시작과 끝을 지정하여 사이에 YAML 문법을 사용해야합니다.</p>\n\n<div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nn\">---</span>\n<span class=\"na\">layout</span><span class=\"pi\">:</span> <span class=\"s\">post</span>\n<span class=\"na\">title</span><span class=\"pi\">:</span> <span class=\"s\">This is post title</span>\n<span class=\"nn\">---</span>\n</code></pre></div></div>\n\n<p>여기서 정의된 변수들은 미리 선언된 <code class=\"highlighter-rouge\">page</code> 객체 변수의 인스턴스 변수로써 접근할 수 있습니다. 미리 정의된 변수 등 자세한 내용은\n<a href=\"https://jekyllrb-ko.github.io/docs/frontmatter/\">여기</a>를 참고하길 바랍니다.</p>\n\n<h1 id=\"마무리\">마무리</h1>\n\n<p>YAML에 대한 간단한 문법과 환경설정 정의하는 방법 그리고 Front Matter에 대해 간략히 알아보았습니다.\n다음 장에서는 블로그의 핵심인 페이지와 포스트 생성에 대해 알아보겠습니다.</p>\n",
    "excerpt": "<p>이번 장에는 이전 장에서 언급했던 것 처럼 Jekyll의 환결설정과 Front Matter에 대해 알아보겠습니다.</p>\n\n<h1 id=\"환경설정\">환경설정</h1>\n\n<p>여기서 환경설정의 의미는 Jekyll의 개발부터 빌드에 관여하는 기능들이 참조할 값들을 설정하는 것을 의미합니다.\n미리 정의된 변수가 존재하며 있고 이를 비롯해서 다양한 변수를 사용자 정의 할 수 있습니다.\n다양하고 많은 설정 값들이 존재하기 때문에 이 글에서는 간단히 전역 변수에 대한 기능을 다루고 넘어가겠습니다.\n보다 자세한 내용은 <a href=\"https://jekyllrb-ko.github.io/docs/configuration/\">여기</a>를 참고하길 바랍니다.</p>\n\n<p>Jekyll은 YAML을 사용하여 프로젝트 루트 디렉토리에서 <code class=\"highlighter-rouge\">_config.yml</code> 파일을 통해 환경설정을 정의합니다.\n본격적으로 환경설정하기 전에 YAML에 대해 간단히 알아보고 갑시다.</p>\n\n<h2 id=\"yaml\">YAML</h2>\n\n<p>YAML은 ‘YAML Ain’t Markup Language’의 약어로 데이터 직렬화 양식 중 하나입니다. JSON이나 XML 등\n다른 양식에 비해 상대적으로 문법이 간결합니다. <code class=\"highlighter-rouge\">Sequence</code>, <code class=\"highlighter-rouge\">Mappings</code> 등 다양한 조함으로 데이터를 구조화하고 표현합니다.</p>\n\n<h3 id=\"sequence\">Sequence</h3>\n\n<p>Sequence는 <code class=\"highlighter-rouge\">[</code>와 <code class=\"highlighter-rouge\">]</code> 또는 <code class=\"highlighter-rouge\">-</code>에 의해 나열된 요소의 그룹으로 표현되며 <code class=\"highlighter-rouge\">Flow Sequnce</code>와 <code class=\"highlighter-rouge\">Block Sequence</code>라는 두 가지 표현 방식이 있습니다.</p>\n\n<div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Flow Sequnce</span>\n<span class=\"pi\">[</span> <span class=\"nv\">first</span><span class=\"pi\">,</span> <span class=\"nv\">second</span><span class=\"pi\">,</span> <span class=\"nv\">third</span> <span class=\"pi\">]</span>\n\n<span class=\"c1\"># Block Sequence</span>\n<span class=\"pi\">-</span> <span class=\"s\">first</span>\n<span class=\"pi\">-</span> <span class=\"s\">second</span>\n<span class=\"pi\">-</span> <span class=\"s\">third</span>\n</code></pre></div></div>\n\n<h3 id=\"mappings\">Mappings</h3>\n\n<p>Mappings는 <code class=\"highlighter-rouge\">{</code>과 <code class=\"highlighter-rouge\">}</code> 또는 <code class=\"highlighter-rouge\">:</code>에 의해 키와 값으로 표현되며 <code class=\"highlighter-rouge\">Flow Mappings</code>와 <code class=\"highlighter-rouge\">Block Mappings</code> 두 가지 표현 방식이 있습니다.</p>\n\n<div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Flow Mappings</span>\n<span class=\"pi\">{</span> <span class=\"nv\">first</span><span class=\"pi\">:</span> <span class=\"nv\">1</span><span class=\"pi\">,</span> <span class=\"nv\">second</span><span class=\"pi\">:</span> <span class=\"nv\">2</span><span class=\"pi\">,</span> <span class=\"nv\">third</span><span class=\"pi\">:</span> <span class=\"nv\">3</span> <span class=\"pi\">}</span>\n\n<span class=\"c1\"># Block Mappings</span>\n<span class=\"na\">first</span><span class=\"pi\">:</span> <span class=\"m\">1</span>\n<span class=\"na\">second</span><span class=\"pi\">:</span> <span class=\"m\">2</span>\n<span class=\"na\">third</span><span class=\"pi\">:</span> <span class=\"m\">3</span>\n</code></pre></div></div>\n\n<h2 id=\"환경설정-정의\">환경설정 정의</h2>\n\n<p>Cayman 테마에서는 기본적으로 _config.yml 파알에 만들고자 하는 사이트의 타이틀과 설명에 대한 변수를 정의하고 있습니다.\n이 값들을 여러분께서 직접 적절히 수정 후 파일을 저장해주세요.</p>\n\n<div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"na\">title</span><span class=\"pi\">:</span> <span class=\"s\">Mouse's Logs</span>\n<span class=\"na\">description</span><span class=\"pi\">:</span> <span class=\"s\">Just Simple Log Collection</span>\n</code></pre></div></div>\n\n<p>여기서 정의된 값은 Liquid 템플릿 언어를 통해 미리 선언된 <code class=\"highlighter-rouge\">site</code> 객체 변수의 인스턴스 변수로써 접근할 수 있습니다.\n<code class=\"highlighter-rouge\">_includes</code> 디렉토리의 default.html 파일을 열어 보시면 아래와 같은 내용을 볼 수 있습니다.</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;h1</span> <span class=\"na\">class=</span><span class=\"s\">\"project-name\"</span><span class=\"nt\">&gt;</span>나만의 블로그를 고급지게 만들어보자 (2)<span class=\"nt\">&lt;/h1&gt;</span>\n</code></pre></div></div>\n\n<p>여기서 표현된 이중 중괄호는 Liquid에서 제공되는 기능으로 <code class=\"highlighter-rouge\">Interpolation</code>이라고 부릅니다. 이 기능은 Liquid에 의해\n이중 중괄호를 포함한 내용을 이중 중괄호 안의 내용을 처리하고 반환된 결과값으로 대체합니다. 결과적으로 여기서 해당 줄은\n<code class=\"highlighter-rouge\">site.title</code> 값으로 대체하고 다음과 같이 변환됩니다.</p>\n\n<blockquote>\n  <p>이중 중괄호 안의 내용은 다음 장에서 설명됩니다.</p>\n</blockquote>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;h1</span> <span class=\"na\">class=</span><span class=\"s\">\"project-name\"</span><span class=\"nt\">&gt;</span>Mouse's Logs<span class=\"nt\">&lt;/h1&gt;</span>\n</code></pre></div></div>\n\n<p>이 단락의 핵심 뷰 포인트는 환경설정을 통해 값을 정의하고 Liquid를 통해 해당 값을 변수로써 접근하여 다양한 제어가 가능하다는 것입니다.</p>\n\n<h1 id=\"front-matter\">Front Matter</h1>\n\n<p>Front Matter 또한 환경설정처럼 YAML을 사용하여 데이터를 정의합니다. 동작은 환경설정과 거의 비슷하지만 한 가지 뚜렷한 차이점이 있습니다.\nFront Matter를 선언 파일은 Jekyll에서 해당 파일을 특별하게 취급하고 처리를 합니다. Liquid를 사용 할 수 있는 기준이 되기도 합니다.\n주의해야 할 사항은 이 Front Matter는 반드시 파일의 최상단에 위치해야 하고 <code class=\"highlighter-rouge\">---</code>로 시작과 끝을 지정하여 사이에 YAML 문법을 사용해야합니다.</p>\n\n<div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nn\">---</span>\n<span class=\"na\">layout</span><span class=\"pi\">:</span> <span class=\"s\">post</span>\n<span class=\"na\">title</span><span class=\"pi\">:</span> <span class=\"s\">This is post title</span>\n<span class=\"nn\">---</span>\n</code></pre></div></div>\n\n<p>여기서 정의된 변수들은 미리 선언된 <code class=\"highlighter-rouge\">page</code> 객체 변수의 인스턴스 변수로써 접근할 수 있습니다. 미리 정의된 변수 등 자세한 내용은\n<a href=\"https://jekyllrb-ko.github.io/docs/frontmatter/\">여기</a>를 참고하길 바랍니다.</p>\n\n<h1 id=\"마무리\">마무리</h1>\n\n<p>YAML에 대한 간단한 문법과 환경설정 정의하는 방법 그리고 Front Matter에 대해 간략히 알아보았습니다.\n다음 장에서는 블로그의 핵심인 페이지와 포스트 생성에 대해 알아보겠습니다.</p>\n",
    "previous": "/2019/12/01/use-ssg-1",
    "next": "/2019/12/01/use-ssg-3"
  },
  {
    "id": "/2019/12/01/use-ssg-1",
    "title": "나만의 블로그를 고급지게 만들어보자 (1)",
    "description": null,
    "date": "2019-12-01 00:00:00 +0900",
    "tags": ["나만의 블로그를 고급지게 만들어보자","Jekyll","SSG","Ruby","Liquid","Github"],
    "slug": "use-ssg-1",
    "url": "/2019/12/01/use-ssg-1",
    "content": "<p>최근에 팀원들과 함께 협업을 진행하면서 제가 알고 있는 지식이나 정보 따위를 공유할 때 몇 가지 불편한 점이 있었습니다.\n전달하고자 하는 내용이 정리되지 않았거나, 팀원을 비롯한 다른 사람들에게 전달되지 못하거나, 반복적으로 언급해야 하는 등\n여러 가지 문제점이 발생했고 이 문제점을 해결하기 위해 이전부터 생각만 하고 있었던 블로그를 만들어야겠다고 결심했습니다.</p>\n\n<h1 id=\"어떤-플랫폼을-선택할까\">어떤 플랫폼을 선택할까?</h1>\n\n<p>나만의 블로그를 만들기 위한 방법에는 크게 두 가지 방법으로 나뉩니다.</p>\n\n<p>첫 번째는 특정 회사에서 서비스하는 플랫폼을 이용하는 방법입니다. 네이버 블로그, 티스토리, 미디움, 브런치, 노션 등\n다양한 플랫폼이 존재하며 제각각 장단점을 가지고 있습니다. 장단점을 언급하는 것을 이번 글에서 벗어하는 주제이기 때문에 넘어가겠습니다.</p>\n\n<p>두 번째는 자신이 직접 처음부터 끝까지 웹 사이트를 만들고 도메인과 서버 따위의 자원을 확보하여 블로그를 만드는 방법입니다.\n보통 이 방법의 경우 첫 번째 방법 보다 상대적으로 많은 비용이 발생하므로 대부분 선택하지 않는 방법입니다.</p>\n\n<p>저 또한 블로그의 포스팅에 비용을 많이 투자하고 싶어서 첫 번째 방법을 채택하였으며 플랫폼은 세밀한 커스터마이징이 가능하고\n도메인과 호스팅 가능한 공간만 있으면 언제든지 마이그레이션 할 수 있는 <code class=\"highlighter-rouge\">SSG</code>인 <code class=\"highlighter-rouge\">Jekyll</code>을 바탕으로 블로그를 만들 수 있는\n<code class=\"highlighter-rouge\">Github Pages</code>를 선택하였습니다.</p>\n\n<h1 id=\"ssg와-jekyll-그리고-github-pages\">SSG와 Jekyll 그리고 Github Pages</h1>\n\n<h2 id=\"ssg란\">SSG란?</h2>\n\n<p>SSG란 <code class=\"highlighter-rouge\">Static Site Generator</code>의 약어로 우리나라 말로는 <code class=\"highlighter-rouge\">정적 사이트 생성기</code> 정도로 해석 할 수 있습니다.\nSSG는 기존에 정적 웹사이트를 만들던 방식에서 불편한 점들을 개선하여 보다 생산성을 높여 빠르게 웹사이트를 만들 수 있도록 고안된 도구입니다.</p>\n\n<h2 id=\"jekyll이란\">Jekyll이란?</h2>\n\n<p><a href=\"https://jekyllrb-ko.github.io/\">Jekyll</a>은 프로그래밍 언어인 <code class=\"highlighter-rouge\">Ruby</code>를 바탕으로 개발된 다양한 SSG 중 하나입니다. Liquid라는 템플릿 언어와\nYAML을 활용한 Front Matter라는 기능 등을 지원하여 보다 빠르게 편리하게 웹사이트를 만들 수 있게 도와줍니다.</p>\n\n<blockquote>\n  <p>YAML은 다음 장에서 설명하겠습니다.</p>\n</blockquote>\n\n<h2 id=\"github-pages란\">Github Pages란?</h2>\n\n<p><a href=\"https://pages.github.com/\">Github Pages</a>는 <a href=\"https://github.com/\">Github</a> 플랫폼을 통해 생성된\n프로젝트 리파지토리에 대한 웹사이트를 쉽게 호스팅 할 수 있도록 지원되는 서비스입니다.\n이 서비스는 github.io 도메인을 기반으로 리파지토리에 있는 파일을 Jekyll로 빌드하여 웹사이트를 배포 혹은 서빙합니다.\n여기서 이 글과 관련된 Github Pages 서비스의 핵심은 리파지토리에 있는 어떤 내용을 웹사이트로 구축 가능하다는 것입니다.</p>\n\n<h1 id=\"백문이-불여일타\">백문이 불여일타</h1>\n\n<h2 id=\"jekyll-사용을-위한-ruby-설치\">Jekyll 사용을 위한 Ruby 설치</h2>\n\n<p>macOS에서는 기본적으로 Ruby가 설치되어 있습니다만, 권한 문제와 추후 버전 관리 등과 같은 문제의 소지가 있어\n<a href=\"https://rvm.io/\">RVM</a>(Ruby Version Manager)이라는 프로그램을 통해 Ruby를 설치 할 것입니다.</p>\n\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>curl <span class=\"nt\">-sSL</span> https://get.rvm.io | bash <span class=\"nt\">-s</span> stable <span class=\"c\"># Insatll the rvm.</span>\n<span class=\"nv\">$ </span><span class=\"nb\">source</span> ~/.rvm/scripts/rvm <span class=\"c\"># Set PATH for rvm.</span>\n<span class=\"nv\">$ </span>rvm <span class=\"nb\">install </span>2.6.3 <span class=\"c\"># Of course, you can use a different version.</span>\n<span class=\"nv\">$ </span>ruby <span class=\"nt\">-v</span> <span class=\"c\"># You must look at installed ruby version information.</span>\n</code></pre></div></div>\n\n<h2 id=\"theme-가져오기\">Theme 가져오기</h2>\n\n<p>Ruby의 패키지 관리자인 RubyGems를 통해 직접 Jekyll을 설치하고 정적 사이트 생성할 수 있습니다.\n하지만 HTML과 CSS를 통해 레이아웃 구조부터 시작하여 스타일링하고 반응형으로 구축하는 것은 한순간에 이루어지지 않는 작업입니다.\n그래서 이 글에서는 Github Pages에서 공식적으로 지원하는 테마 중 <a href=\"https://github.com/pages-themes/cayman\">Cayman</a>\n이라는 테마를 활용하여 블로그를 만들 것입니다.</p>\n\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># Download to Cayman theme.</span>\n<span class=\"nv\">$ </span>curl <span class=\"nt\">-L</span> <span class=\"nt\">-O</span> https://github.com/pages-themes/cayman/archive/master.zip\n</code></pre></div></div>\n\n<h2 id=\"자동-빌드\">자동 빌드</h2>\n\n<p>다운로드 받은 테마 파일을 압축 해제 후 해당 디렉토리의 경로로 이동 후 아래와 같은 명령어를 통해 브라우저로 결과물을 볼 수 있습니다.</p>\n\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>bundle <span class=\"nb\">exec </span>jekyll serve <span class=\"c\"># Now browse to http://localhost:4000</span>\n</code></pre></div></div>\n\n<p>위 명령어는 로컬 서버를 생성하여 프로젝트 루트 디렉토리 내에 있는 파일을 감시하여 파일이 수정되면 자동으로 주어진 파일을 빌드하여\n정적 사이트를 생성합니다. 빌드하여 생성된 정적 사이트는 프로젝트 루트 디렉토리를 기준으로 <code class=\"highlighter-rouge\">_site</code> 디렉토리에 위치합니다.</p>\n\n<p>해당 명령어에는 다양한 옵션을 제공하니 <a href=\"https://github.com/pages-themes/cayman/archive/master.zip\">여기</a>에서 참고 하시길 바랍니다.</p>\n\n<h1 id=\"마무리\">마무리</h1>\n\n<p>정적 사이트를 만들기 위해 어떤 방법이 있고 몇 가지 용어 및 기술을 살펴보고 개발 환경까지 구성해보았습니다.\n다음 장에는 Jekyll 환경설정과 Front Matter라는 것에 대해 알아보겠습니다.</p>\n",
    "excerpt": "<p>최근에 팀원들과 함께 협업을 진행하면서 제가 알고 있는 지식이나 정보 따위를 공유할 때 몇 가지 불편한 점이 있었습니다.\n전달하고자 하는 내용이 정리되지 않았거나, 팀원을 비롯한 다른 사람들에게 전달되지 못하거나, 반복적으로 언급해야 하는 등\n여러 가지 문제점이 발생했고 이 문제점을 해결하기 위해 이전부터 생각만 하고 있었던 블로그를 만들어야겠다고 결심했습니다.</p>\n\n<h1 id=\"어떤-플랫폼을-선택할까\">어떤 플랫폼을 선택할까?</h1>\n\n<p>나만의 블로그를 만들기 위한 방법에는 크게 두 가지 방법으로 나뉩니다.</p>\n\n<p>첫 번째는 특정 회사에서 서비스하는 플랫폼을 이용하는 방법입니다. 네이버 블로그, 티스토리, 미디움, 브런치, 노션 등\n다양한 플랫폼이 존재하며 제각각 장단점을 가지고 있습니다. 장단점을 언급하는 것을 이번 글에서 벗어하는 주제이기 때문에 넘어가겠습니다.</p>\n\n<p>두 번째는 자신이 직접 처음부터 끝까지 웹 사이트를 만들고 도메인과 서버 따위의 자원을 확보하여 블로그를 만드는 방법입니다.\n보통 이 방법의 경우 첫 번째 방법 보다 상대적으로 많은 비용이 발생하므로 대부분 선택하지 않는 방법입니다.</p>\n\n<p>저 또한 블로그의 포스팅에 비용을 많이 투자하고 싶어서 첫 번째 방법을 채택하였으며 플랫폼은 세밀한 커스터마이징이 가능하고\n도메인과 호스팅 가능한 공간만 있으면 언제든지 마이그레이션 할 수 있는 <code class=\"highlighter-rouge\">SSG</code>인 <code class=\"highlighter-rouge\">Jekyll</code>을 바탕으로 블로그를 만들 수 있는\n<code class=\"highlighter-rouge\">Github Pages</code>를 선택하였습니다.</p>\n\n<h1 id=\"ssg와-jekyll-그리고-github-pages\">SSG와 Jekyll 그리고 Github Pages</h1>\n\n<h2 id=\"ssg란\">SSG란?</h2>\n\n<p>SSG란 <code class=\"highlighter-rouge\">Static Site Generator</code>의 약어로 우리나라 말로는 <code class=\"highlighter-rouge\">정적 사이트 생성기</code> 정도로 해석 할 수 있습니다.\nSSG는 기존에 정적 웹사이트를 만들던 방식에서 불편한 점들을 개선하여 보다 생산성을 높여 빠르게 웹사이트를 만들 수 있도록 고안된 도구입니다.</p>\n\n<h2 id=\"jekyll이란\">Jekyll이란?</h2>\n\n<p><a href=\"https://jekyllrb-ko.github.io/\">Jekyll</a>은 프로그래밍 언어인 <code class=\"highlighter-rouge\">Ruby</code>를 바탕으로 개발된 다양한 SSG 중 하나입니다. Liquid라는 템플릿 언어와\nYAML을 활용한 Front Matter라는 기능 등을 지원하여 보다 빠르게 편리하게 웹사이트를 만들 수 있게 도와줍니다.</p>\n\n<blockquote>\n  <p>YAML은 다음 장에서 설명하겠습니다.</p>\n</blockquote>\n\n<h2 id=\"github-pages란\">Github Pages란?</h2>\n\n<p><a href=\"https://pages.github.com/\">Github Pages</a>는 <a href=\"https://github.com/\">Github</a> 플랫폼을 통해 생성된\n프로젝트 리파지토리에 대한 웹사이트를 쉽게 호스팅 할 수 있도록 지원되는 서비스입니다.\n이 서비스는 github.io 도메인을 기반으로 리파지토리에 있는 파일을 Jekyll로 빌드하여 웹사이트를 배포 혹은 서빙합니다.\n여기서 이 글과 관련된 Github Pages 서비스의 핵심은 리파지토리에 있는 어떤 내용을 웹사이트로 구축 가능하다는 것입니다.</p>\n\n<h1 id=\"백문이-불여일타\">백문이 불여일타</h1>\n\n<h2 id=\"jekyll-사용을-위한-ruby-설치\">Jekyll 사용을 위한 Ruby 설치</h2>\n\n<p>macOS에서는 기본적으로 Ruby가 설치되어 있습니다만, 권한 문제와 추후 버전 관리 등과 같은 문제의 소지가 있어\n<a href=\"https://rvm.io/\">RVM</a>(Ruby Version Manager)이라는 프로그램을 통해 Ruby를 설치 할 것입니다.</p>\n\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>curl <span class=\"nt\">-sSL</span> https://get.rvm.io | bash <span class=\"nt\">-s</span> stable <span class=\"c\"># Insatll the rvm.</span>\n<span class=\"nv\">$ </span><span class=\"nb\">source</span> ~/.rvm/scripts/rvm <span class=\"c\"># Set PATH for rvm.</span>\n<span class=\"nv\">$ </span>rvm <span class=\"nb\">install </span>2.6.3 <span class=\"c\"># Of course, you can use a different version.</span>\n<span class=\"nv\">$ </span>ruby <span class=\"nt\">-v</span> <span class=\"c\"># You must look at installed ruby version information.</span>\n</code></pre></div></div>\n\n<h2 id=\"theme-가져오기\">Theme 가져오기</h2>\n\n<p>Ruby의 패키지 관리자인 RubyGems를 통해 직접 Jekyll을 설치하고 정적 사이트 생성할 수 있습니다.\n하지만 HTML과 CSS를 통해 레이아웃 구조부터 시작하여 스타일링하고 반응형으로 구축하는 것은 한순간에 이루어지지 않는 작업입니다.\n그래서 이 글에서는 Github Pages에서 공식적으로 지원하는 테마 중 <a href=\"https://github.com/pages-themes/cayman\">Cayman</a>\n이라는 테마를 활용하여 블로그를 만들 것입니다.</p>\n\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># Download to Cayman theme.</span>\n<span class=\"nv\">$ </span>curl <span class=\"nt\">-L</span> <span class=\"nt\">-O</span> https://github.com/pages-themes/cayman/archive/master.zip\n</code></pre></div></div>\n\n<h2 id=\"자동-빌드\">자동 빌드</h2>\n\n<p>다운로드 받은 테마 파일을 압축 해제 후 해당 디렉토리의 경로로 이동 후 아래와 같은 명령어를 통해 브라우저로 결과물을 볼 수 있습니다.</p>\n\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>bundle <span class=\"nb\">exec </span>jekyll serve <span class=\"c\"># Now browse to http://localhost:4000</span>\n</code></pre></div></div>\n\n<p>위 명령어는 로컬 서버를 생성하여 프로젝트 루트 디렉토리 내에 있는 파일을 감시하여 파일이 수정되면 자동으로 주어진 파일을 빌드하여\n정적 사이트를 생성합니다. 빌드하여 생성된 정적 사이트는 프로젝트 루트 디렉토리를 기준으로 <code class=\"highlighter-rouge\">_site</code> 디렉토리에 위치합니다.</p>\n\n<p>해당 명령어에는 다양한 옵션을 제공하니 <a href=\"https://github.com/pages-themes/cayman/archive/master.zip\">여기</a>에서 참고 하시길 바랍니다.</p>\n\n<h1 id=\"마무리\">마무리</h1>\n\n<p>정적 사이트를 만들기 위해 어떤 방법이 있고 몇 가지 용어 및 기술을 살펴보고 개발 환경까지 구성해보았습니다.\n다음 장에는 Jekyll 환경설정과 Front Matter라는 것에 대해 알아보겠습니다.</p>\n",
    "previous": null,
    "next": "/2019/12/01/use-ssg-2"
  }
]